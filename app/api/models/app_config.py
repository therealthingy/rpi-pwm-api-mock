# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.api.models.base_model_ import Model
from app.api.models.app_config_app import AppConfigApp
from app.api.models.app_config_pwm import AppConfigPWM
from app.api import util

from app.api.models.app_config_app import AppConfigApp  # noqa: E501
from app.api.models.app_config_pwm import AppConfigPWM  # noqa: E501

class AppConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app=None, pwm=None, last_time_changed=None):  # noqa: E501
        """AppConfig - a model defined in OpenAPI

        :param app: The app of this AppConfig.  # noqa: E501
        :type app: AppConfigApp
        :param pwm: The pwm of this AppConfig.  # noqa: E501
        :type pwm: AppConfigPWM
        :param last_time_changed: The last_time_changed of this AppConfig.  # noqa: E501
        :type last_time_changed: datetime
        """
        self.openapi_types = {
            'app': AppConfigApp,
            'pwm': AppConfigPWM,
            'last_time_changed': datetime
        }

        self.attribute_map = {
            'app': 'app',
            'pwm': 'pwm',
            'last_time_changed': 'lastTimeChanged'
        }

        self._app = app
        self._pwm = pwm
        self._last_time_changed = last_time_changed

    @classmethod
    def from_dict(cls, dikt) -> 'AppConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppConfig of this AppConfig.  # noqa: E501
        :rtype: AppConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this AppConfig.


        :return: The app of this AppConfig.
        :rtype: AppConfigApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this AppConfig.


        :param app: The app of this AppConfig.
        :type app: AppConfigApp
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")  # noqa: E501

        self._app = app

    @property
    def pwm(self):
        """Gets the pwm of this AppConfig.


        :return: The pwm of this AppConfig.
        :rtype: AppConfigPWM
        """
        return self._pwm

    @pwm.setter
    def pwm(self, pwm):
        """Sets the pwm of this AppConfig.


        :param pwm: The pwm of this AppConfig.
        :type pwm: AppConfigPWM
        """
        if pwm is None:
            raise ValueError("Invalid value for `pwm`, must not be `None`")  # noqa: E501

        self._pwm = pwm

    @property
    def last_time_changed(self):
        """Gets the last_time_changed of this AppConfig.

        Last time settings were changed (used for optimistic locking)  # noqa: E501

        :return: The last_time_changed of this AppConfig.
        :rtype: datetime
        """
        return self._last_time_changed

    @last_time_changed.setter
    def last_time_changed(self, last_time_changed):
        """Sets the last_time_changed of this AppConfig.

        Last time settings were changed (used for optimistic locking)  # noqa: E501

        :param last_time_changed: The last_time_changed of this AppConfig.
        :type last_time_changed: datetime
        """
        if last_time_changed is None:
            raise ValueError("Invalid value for `last_time_changed`, must not be `None`")  # noqa: E501
        if last_time_changed is not None and len(last_time_changed) > 255:
            raise ValueError("Invalid value for `last_time_changed`, length must be less than or equal to `255`")  # noqa: E501

        self._last_time_changed = last_time_changed
