# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.api.models.base_model_ import Model
from app.api.models.app_fan_curve_complete import AppFanCurveComplete
from app.api import util

from app.api.models.app_fan_curve_complete import AppFanCurveComplete  # noqa: E501

class AppConfigApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fan_on=None, logging_level=None, dc_update_interval_in_sec=None, logging_enabled=None, selected_fan_curve=None):  # noqa: E501
        """AppConfigApp - a model defined in OpenAPI

        :param fan_on: The fan_on of this AppConfigApp.  # noqa: E501
        :type fan_on: bool
        :param logging_level: The logging_level of this AppConfigApp.  # noqa: E501
        :type logging_level: str
        :param dc_update_interval_in_sec: The dc_update_interval_in_sec of this AppConfigApp.  # noqa: E501
        :type dc_update_interval_in_sec: int
        :param logging_enabled: The logging_enabled of this AppConfigApp.  # noqa: E501
        :type logging_enabled: bool
        :param selected_fan_curve: The selected_fan_curve of this AppConfigApp.  # noqa: E501
        :type selected_fan_curve: AppFanCurveComplete
        """
        self.openapi_types = {
            'fan_on': bool,
            'logging_level': str,
            'dc_update_interval_in_sec': int,
            'logging_enabled': bool,
            'selected_fan_curve': AppFanCurveComplete
        }

        self.attribute_map = {
            'fan_on': 'fanOn',
            'logging_level': 'loggingLevel',
            'dc_update_interval_in_sec': 'DCUpdateIntervalInSec',
            'logging_enabled': 'loggingEnabled',
            'selected_fan_curve': 'selectedFanCurve'
        }

        self._fan_on = fan_on
        self._logging_level = logging_level
        self._dc_update_interval_in_sec = dc_update_interval_in_sec
        self._logging_enabled = logging_enabled
        self._selected_fan_curve = selected_fan_curve

    @classmethod
    def from_dict(cls, dikt) -> 'AppConfigApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppConfigApp of this AppConfigApp.  # noqa: E501
        :rtype: AppConfigApp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fan_on(self):
        """Gets the fan_on of this AppConfigApp.

        Whether fan is turned on (kill switch)  # noqa: E501

        :return: The fan_on of this AppConfigApp.
        :rtype: bool
        """
        return self._fan_on

    @fan_on.setter
    def fan_on(self, fan_on):
        """Sets the fan_on of this AppConfigApp.

        Whether fan is turned on (kill switch)  # noqa: E501

        :param fan_on: The fan_on of this AppConfigApp.
        :type fan_on: bool
        """
        if fan_on is None:
            raise ValueError("Invalid value for `fan_on`, must not be `None`")  # noqa: E501

        self._fan_on = fan_on

    @property
    def logging_level(self):
        """Gets the logging_level of this AppConfigApp.

        Current log level  # noqa: E501

        :return: The logging_level of this AppConfigApp.
        :rtype: str
        """
        return self._logging_level

    @logging_level.setter
    def logging_level(self, logging_level):
        """Sets the logging_level of this AppConfigApp.

        Current log level  # noqa: E501

        :param logging_level: The logging_level of this AppConfigApp.
        :type logging_level: str
        """
        allowed_values = ["DEBUG", "INFO", "WARN", "ERROR", "CRITICAL"]  # noqa: E501
        if logging_level not in allowed_values:
            raise ValueError(
                "Invalid value for `logging_level` ({0}), must be one of {1}"
                .format(logging_level, allowed_values)
            )

        self._logging_level = logging_level

    @property
    def dc_update_interval_in_sec(self):
        """Gets the dc_update_interval_in_sec of this AppConfigApp.

        How frequently the dutycycle shall be updated in seconds  # noqa: E501

        :return: The dc_update_interval_in_sec of this AppConfigApp.
        :rtype: int
        """
        return self._dc_update_interval_in_sec

    @dc_update_interval_in_sec.setter
    def dc_update_interval_in_sec(self, dc_update_interval_in_sec):
        """Sets the dc_update_interval_in_sec of this AppConfigApp.

        How frequently the dutycycle shall be updated in seconds  # noqa: E501

        :param dc_update_interval_in_sec: The dc_update_interval_in_sec of this AppConfigApp.
        :type dc_update_interval_in_sec: int
        """
        if dc_update_interval_in_sec is None:
            raise ValueError("Invalid value for `dc_update_interval_in_sec`, must not be `None`")  # noqa: E501
        if dc_update_interval_in_sec is not None and dc_update_interval_in_sec > 10:  # noqa: E501
            raise ValueError("Invalid value for `dc_update_interval_in_sec`, must be a value less than or equal to `10`")  # noqa: E501
        if dc_update_interval_in_sec is not None and dc_update_interval_in_sec < 1:  # noqa: E501
            raise ValueError("Invalid value for `dc_update_interval_in_sec`, must be a value greater than or equal to `1`")  # noqa: E501

        self._dc_update_interval_in_sec = dc_update_interval_in_sec

    @property
    def logging_enabled(self):
        """Gets the logging_enabled of this AppConfigApp.

        Whether logging is enabled  # noqa: E501

        :return: The logging_enabled of this AppConfigApp.
        :rtype: bool
        """
        return self._logging_enabled

    @logging_enabled.setter
    def logging_enabled(self, logging_enabled):
        """Sets the logging_enabled of this AppConfigApp.

        Whether logging is enabled  # noqa: E501

        :param logging_enabled: The logging_enabled of this AppConfigApp.
        :type logging_enabled: bool
        """
        if logging_enabled is None:
            raise ValueError("Invalid value for `logging_enabled`, must not be `None`")  # noqa: E501

        self._logging_enabled = logging_enabled

    @property
    def selected_fan_curve(self):
        """Gets the selected_fan_curve of this AppConfigApp.


        :return: The selected_fan_curve of this AppConfigApp.
        :rtype: AppFanCurveComplete
        """
        return self._selected_fan_curve

    @selected_fan_curve.setter
    def selected_fan_curve(self, selected_fan_curve):
        """Sets the selected_fan_curve of this AppConfigApp.


        :param selected_fan_curve: The selected_fan_curve of this AppConfigApp.
        :type selected_fan_curve: AppFanCurveComplete
        """
        if selected_fan_curve is None:
            raise ValueError("Invalid value for `selected_fan_curve`, must not be `None`")  # noqa: E501

        self._selected_fan_curve = selected_fan_curve
