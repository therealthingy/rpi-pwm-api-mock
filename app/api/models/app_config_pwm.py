# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.api.models.base_model_ import Model
from app.api import util


class AppConfigPWM(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gpio_pin=None, invert_signal=None, max_dcin_perc=None, min_dcin_perc=None):  # noqa: E501
        """AppConfigPWM - a model defined in OpenAPI

        :param gpio_pin: The gpio_pin of this AppConfigPWM.  # noqa: E501
        :type gpio_pin: int
        :param invert_signal: The invert_signal of this AppConfigPWM.  # noqa: E501
        :type invert_signal: bool
        :param max_dcin_perc: The max_dcin_perc of this AppConfigPWM.  # noqa: E501
        :type max_dcin_perc: int
        :param min_dcin_perc: The min_dcin_perc of this AppConfigPWM.  # noqa: E501
        :type min_dcin_perc: int
        """
        self.openapi_types = {
            'gpio_pin': int,
            'invert_signal': bool,
            'max_dcin_perc': int,
            'min_dcin_perc': int
        }

        self.attribute_map = {
            'gpio_pin': 'gpioPin',
            'invert_signal': 'invertSignal',
            'max_dcin_perc': 'maxDCInPerc',
            'min_dcin_perc': 'minDCInPerc'
        }

        self._gpio_pin = gpio_pin
        self._invert_signal = invert_signal
        self._max_dcin_perc = max_dcin_perc
        self._min_dcin_perc = min_dcin_perc

    @classmethod
    def from_dict(cls, dikt) -> 'AppConfigPWM':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppConfigPWM of this AppConfigPWM.  # noqa: E501
        :rtype: AppConfigPWM
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gpio_pin(self):
        """Gets the gpio_pin of this AppConfigPWM.

        GPIO pin used for PWM (which applies the desired dutycycle for the fan)  # noqa: E501

        :return: The gpio_pin of this AppConfigPWM.
        :rtype: int
        """
        return self._gpio_pin

    @gpio_pin.setter
    def gpio_pin(self, gpio_pin):
        """Sets the gpio_pin of this AppConfigPWM.

        GPIO pin used for PWM (which applies the desired dutycycle for the fan)  # noqa: E501

        :param gpio_pin: The gpio_pin of this AppConfigPWM.
        :type gpio_pin: int
        """
        if gpio_pin is None:
            raise ValueError("Invalid value for `gpio_pin`, must not be `None`")  # noqa: E501

        self._gpio_pin = gpio_pin

    @property
    def invert_signal(self):
        """Gets the invert_signal of this AppConfigPWM.

        Whether PWM signal shall be inverted (may be required based on transitor type (PNP / NPN)  # noqa: E501

        :return: The invert_signal of this AppConfigPWM.
        :rtype: bool
        """
        return self._invert_signal

    @invert_signal.setter
    def invert_signal(self, invert_signal):
        """Sets the invert_signal of this AppConfigPWM.

        Whether PWM signal shall be inverted (may be required based on transitor type (PNP / NPN)  # noqa: E501

        :param invert_signal: The invert_signal of this AppConfigPWM.
        :type invert_signal: bool
        """
        if invert_signal is None:
            raise ValueError("Invalid value for `invert_signal`, must not be `None`")  # noqa: E501

        self._invert_signal = invert_signal

    @property
    def max_dcin_perc(self):
        """Gets the max_dcin_perc of this AppConfigPWM.

        Limits max duty cycle, i.e., the max fan speed in percent.  May be desirable for some fans which only operate reliably within a specific range of fan speeds. NOTE: This effectively overwrittes the applied fan curve.  # noqa: E501

        :return: The max_dcin_perc of this AppConfigPWM.
        :rtype: int
        """
        return self._max_dcin_perc

    @max_dcin_perc.setter
    def max_dcin_perc(self, max_dcin_perc):
        """Sets the max_dcin_perc of this AppConfigPWM.

        Limits max duty cycle, i.e., the max fan speed in percent.  May be desirable for some fans which only operate reliably within a specific range of fan speeds. NOTE: This effectively overwrittes the applied fan curve.  # noqa: E501

        :param max_dcin_perc: The max_dcin_perc of this AppConfigPWM.
        :type max_dcin_perc: int
        """
        if max_dcin_perc is None:
            raise ValueError("Invalid value for `max_dcin_perc`, must not be `None`")  # noqa: E501
        if max_dcin_perc is not None and max_dcin_perc > 100:  # noqa: E501
            raise ValueError("Invalid value for `max_dcin_perc`, must be a value less than or equal to `100`")  # noqa: E501
        if max_dcin_perc is not None and max_dcin_perc < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_dcin_perc`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_dcin_perc = max_dcin_perc

    @property
    def min_dcin_perc(self):
        """Gets the min_dcin_perc of this AppConfigPWM.

        Limits min duty cycle, i.e., the min fan speed in percent.  May be desirable for some fans which only operate reliably within a specific range of fan speeds. NOTE: This effectively overwrittes the applied fan curve.  # noqa: E501

        :return: The min_dcin_perc of this AppConfigPWM.
        :rtype: int
        """
        return self._min_dcin_perc

    @min_dcin_perc.setter
    def min_dcin_perc(self, min_dcin_perc):
        """Sets the min_dcin_perc of this AppConfigPWM.

        Limits min duty cycle, i.e., the min fan speed in percent.  May be desirable for some fans which only operate reliably within a specific range of fan speeds. NOTE: This effectively overwrittes the applied fan curve.  # noqa: E501

        :param min_dcin_perc: The min_dcin_perc of this AppConfigPWM.
        :type min_dcin_perc: int
        """
        if min_dcin_perc is None:
            raise ValueError("Invalid value for `min_dcin_perc`, must not be `None`")  # noqa: E501
        if min_dcin_perc is not None and min_dcin_perc > 100:  # noqa: E501
            raise ValueError("Invalid value for `min_dcin_perc`, must be a value less than or equal to `100`")  # noqa: E501
        if min_dcin_perc is not None and min_dcin_perc < 1:  # noqa: E501
            raise ValueError("Invalid value for `min_dcin_perc`, must be a value greater than or equal to `1`")  # noqa: E501

        self._min_dcin_perc = min_dcin_perc
