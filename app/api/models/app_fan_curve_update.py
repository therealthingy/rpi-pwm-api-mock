# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.api.models.base_model_ import Model
from app.api.models.app_fan_curve_base import AppFanCurveBase
from app.api.models.app_fan_curve_series_point import AppFanCurveSeriesPoint
from app.api.models.app_fan_curve_update_one_of import AppFanCurveUpdateOneOf
from app.api import util

from app.api.models.app_fan_curve_base import AppFanCurveBase  # noqa: E501
from app.api.models.app_fan_curve_series_point import AppFanCurveSeriesPoint  # noqa: E501
from app.api.models.app_fan_curve_update_one_of import AppFanCurveUpdateOneOf  # noqa: E501

class AppFanCurveUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_time_changed=None, name=None, fan_curve_series=None):  # noqa: E501
        """AppFanCurveUpdate - a model defined in OpenAPI

        :param last_time_changed: The last_time_changed of this AppFanCurveUpdate.  # noqa: E501
        :type last_time_changed: datetime
        :param name: The name of this AppFanCurveUpdate.  # noqa: E501
        :type name: str
        :param fan_curve_series: The fan_curve_series of this AppFanCurveUpdate.  # noqa: E501
        :type fan_curve_series: list[AppFanCurveSeriesPoint]
        """
        self.openapi_types = {
            'last_time_changed': datetime,
            'name': str,
            'fan_curve_series': list[AppFanCurveSeriesPoint]
        }

        self.attribute_map = {
            'last_time_changed': 'lastTimeChanged',
            'name': 'name',
            'fan_curve_series': 'fanCurveSeries'
        }

        self._last_time_changed = last_time_changed
        self._name = name
        self._fan_curve_series = fan_curve_series

    @classmethod
    def from_dict(cls, dikt) -> 'AppFanCurveUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppFanCurveUpdate of this AppFanCurveUpdate.  # noqa: E501
        :rtype: AppFanCurveUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_time_changed(self):
        """Gets the last_time_changed of this AppFanCurveUpdate.

        Last time fan curve was updated (used for optimistic locking)  # noqa: E501

        :return: The last_time_changed of this AppFanCurveUpdate.
        :rtype: datetime
        """
        return self._last_time_changed

    @last_time_changed.setter
    def last_time_changed(self, last_time_changed):
        """Sets the last_time_changed of this AppFanCurveUpdate.

        Last time fan curve was updated (used for optimistic locking)  # noqa: E501

        :param last_time_changed: The last_time_changed of this AppFanCurveUpdate.
        :type last_time_changed: datetime
        """
        if last_time_changed is None:
            raise ValueError("Invalid value for `last_time_changed`, must not be `None`")  # noqa: E501

        self._last_time_changed = last_time_changed

    @property
    def name(self):
        """Gets the name of this AppFanCurveUpdate.

        Name of the fan curve  # noqa: E501

        :return: The name of this AppFanCurveUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppFanCurveUpdate.

        Name of the fan curve  # noqa: E501

        :param name: The name of this AppFanCurveUpdate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def fan_curve_series(self):
        """Gets the fan_curve_series of this AppFanCurveUpdate.

        Array comprised of all fan series points  # noqa: E501

        :return: The fan_curve_series of this AppFanCurveUpdate.
        :rtype: list[AppFanCurveSeriesPoint]
        """
        return self._fan_curve_series

    @fan_curve_series.setter
    def fan_curve_series(self, fan_curve_series):
        """Sets the fan_curve_series of this AppFanCurveUpdate.

        Array comprised of all fan series points  # noqa: E501

        :param fan_curve_series: The fan_curve_series of this AppFanCurveUpdate.
        :type fan_curve_series: list[AppFanCurveSeriesPoint]
        """
        if fan_curve_series is None:
            raise ValueError("Invalid value for `fan_curve_series`, must not be `None`")  # noqa: E501
        if fan_curve_series is not None and len(fan_curve_series) > 10:
            raise ValueError("Invalid value for `fan_curve_series`, number of items must be less than or equal to `10`")  # noqa: E501
        if fan_curve_series is not None and len(fan_curve_series) < 1:
            raise ValueError("Invalid value for `fan_curve_series`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._fan_curve_series = fan_curve_series
