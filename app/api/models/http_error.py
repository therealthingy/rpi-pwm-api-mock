# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class HTTPError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_status_code=None, http_status_description=None, app_error_code=None, app_error_description=None, log_uuid=None):  # noqa: E501
        """HTTPError - a model defined in OpenAPI

        :param http_status_code: The http_status_code of this HTTPError.  # noqa: E501
        :type http_status_code: int
        :param http_status_description: The http_status_description of this HTTPError.  # noqa: E501
        :type http_status_description: str
        :param app_error_code: The app_error_code of this HTTPError.  # noqa: E501
        :type app_error_code: int
        :param app_error_description: The app_error_description of this HTTPError.  # noqa: E501
        :type app_error_description: str
        :param log_uuid: The log_uuid of this HTTPError.  # noqa: E501
        :type log_uuid: str
        """
        self.openapi_types = {
            'http_status_code': int,
            'http_status_description': str,
            'app_error_code': int,
            'app_error_description': str,
            'log_uuid': str
        }

        self.attribute_map = {
            'http_status_code': 'httpStatusCode',
            'http_status_description': 'httpStatusDescription',
            'app_error_code': 'appErrorCode',
            'app_error_description': 'appErrorDescription',
            'log_uuid': 'logUuid'
        }

        self._http_status_code = http_status_code
        self._http_status_description = http_status_description
        self._app_error_code = app_error_code
        self._app_error_description = app_error_description
        self._log_uuid = log_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'HTTPError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HTTPError of this HTTPError.  # noqa: E501
        :rtype: HTTPError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_status_code(self):
        """Gets the http_status_code of this HTTPError.

        The HTTP status code sent to client  # noqa: E501

        :return: The http_status_code of this HTTPError.
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this HTTPError.

        The HTTP status code sent to client  # noqa: E501

        :param http_status_code: The http_status_code of this HTTPError.
        :type http_status_code: int
        """
        if http_status_code is None:
            raise ValueError("Invalid value for `http_status_code`, must not be `None`")  # noqa: E501

        self._http_status_code = http_status_code

    @property
    def http_status_description(self):
        """Gets the http_status_description of this HTTPError.

        Textual description of the HTTP status code (could also be looked up by client on e.g., Wikipedia)  # noqa: E501

        :return: The http_status_description of this HTTPError.
        :rtype: str
        """
        return self._http_status_description

    @http_status_description.setter
    def http_status_description(self, http_status_description):
        """Sets the http_status_description of this HTTPError.

        Textual description of the HTTP status code (could also be looked up by client on e.g., Wikipedia)  # noqa: E501

        :param http_status_description: The http_status_description of this HTTPError.
        :type http_status_description: str
        """
        if http_status_description is None:
            raise ValueError("Invalid value for `http_status_description`, must not be `None`")  # noqa: E501

        self._http_status_description = http_status_description

    @property
    def app_error_code(self):
        """Gets the app_error_code of this HTTPError.

        Error code which is used internally to refer to errors (e.g., 0 indicates 4xx HTTP errors)  # noqa: E501

        :return: The app_error_code of this HTTPError.
        :rtype: int
        """
        return self._app_error_code

    @app_error_code.setter
    def app_error_code(self, app_error_code):
        """Sets the app_error_code of this HTTPError.

        Error code which is used internally to refer to errors (e.g., 0 indicates 4xx HTTP errors)  # noqa: E501

        :param app_error_code: The app_error_code of this HTTPError.
        :type app_error_code: int
        """
        if app_error_code is None:
            raise ValueError("Invalid value for `app_error_code`, must not be `None`")  # noqa: E501

        self._app_error_code = app_error_code

    @property
    def app_error_description(self):
        """Gets the app_error_description of this HTTPError.

        Textual description of the error code for better comprehension on client side  # noqa: E501

        :return: The app_error_description of this HTTPError.
        :rtype: str
        """
        return self._app_error_description

    @app_error_description.setter
    def app_error_description(self, app_error_description):
        """Sets the app_error_description of this HTTPError.

        Textual description of the error code for better comprehension on client side  # noqa: E501

        :param app_error_description: The app_error_description of this HTTPError.
        :type app_error_description: str
        """
        if app_error_description is None:
            raise ValueError("Invalid value for `app_error_description`, must not be `None`")  # noqa: E501

        self._app_error_description = app_error_description

    @property
    def log_uuid(self):
        """Gets the log_uuid of this HTTPError.

        UUID of log entry (can be used to find log entry more easily; NOTE: May be `null` when error wasn't logged)  # noqa: E501

        :return: The log_uuid of this HTTPError.
        :rtype: str
        """
        return self._log_uuid

    @log_uuid.setter
    def log_uuid(self, log_uuid):
        """Sets the log_uuid of this HTTPError.

        UUID of log entry (can be used to find log entry more easily; NOTE: May be `null` when error wasn't logged)  # noqa: E501

        :param log_uuid: The log_uuid of this HTTPError.
        :type log_uuid: str
        """

        self._log_uuid = log_uuid
