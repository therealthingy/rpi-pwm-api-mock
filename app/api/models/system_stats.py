# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class SystemStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_total_util_in_perc=None, cpu_clock_in_mhz=None, cpu_temp_in_cels=None, fan_dcin_perc=None):  # noqa: E501
        """SystemStats - a model defined in OpenAPI

        :param cpu_total_util_in_perc: The cpu_total_util_in_perc of this SystemStats.  # noqa: E501
        :type cpu_total_util_in_perc: int
        :param cpu_clock_in_mhz: The cpu_clock_in_mhz of this SystemStats.  # noqa: E501
        :type cpu_clock_in_mhz: int
        :param cpu_temp_in_cels: The cpu_temp_in_cels of this SystemStats.  # noqa: E501
        :type cpu_temp_in_cels: int
        :param fan_dcin_perc: The fan_dcin_perc of this SystemStats.  # noqa: E501
        :type fan_dcin_perc: int
        """
        self.openapi_types = {
            'cpu_total_util_in_perc': int,
            'cpu_clock_in_mhz': int,
            'cpu_temp_in_cels': int,
            'fan_dcin_perc': int
        }

        self.attribute_map = {
            'cpu_total_util_in_perc': 'cpuTotalUtilInPerc',
            'cpu_clock_in_mhz': 'cpuClockInMhz',
            'cpu_temp_in_cels': 'cpuTempInCels',
            'fan_dcin_perc': 'fanDCInPerc'
        }

        self._cpu_total_util_in_perc = cpu_total_util_in_perc
        self._cpu_clock_in_mhz = cpu_clock_in_mhz
        self._cpu_temp_in_cels = cpu_temp_in_cels
        self._fan_dcin_perc = fan_dcin_perc

    @classmethod
    def from_dict(cls, dikt) -> 'SystemStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SystemStats of this SystemStats.  # noqa: E501
        :rtype: SystemStats
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_total_util_in_perc(self):
        """Gets the cpu_total_util_in_perc of this SystemStats.

        Current total CPU utilization in percent (retrieved via `ps -A -o pcpu | tail -n+2 | paste -sd+ | bc`)  # noqa: E501

        :return: The cpu_total_util_in_perc of this SystemStats.
        :rtype: int
        """
        return self._cpu_total_util_in_perc

    @cpu_total_util_in_perc.setter
    def cpu_total_util_in_perc(self, cpu_total_util_in_perc):
        """Sets the cpu_total_util_in_perc of this SystemStats.

        Current total CPU utilization in percent (retrieved via `ps -A -o pcpu | tail -n+2 | paste -sd+ | bc`)  # noqa: E501

        :param cpu_total_util_in_perc: The cpu_total_util_in_perc of this SystemStats.
        :type cpu_total_util_in_perc: int
        """
        if cpu_total_util_in_perc is None:
            raise ValueError("Invalid value for `cpu_total_util_in_perc`, must not be `None`")  # noqa: E501

        self._cpu_total_util_in_perc = cpu_total_util_in_perc

    @property
    def cpu_clock_in_mhz(self):
        """Gets the cpu_clock_in_mhz of this SystemStats.

        Current frequency of CPU (core 0 ?) in MHz  (retrieved via `cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq` / 1000)  # noqa: E501

        :return: The cpu_clock_in_mhz of this SystemStats.
        :rtype: int
        """
        return self._cpu_clock_in_mhz

    @cpu_clock_in_mhz.setter
    def cpu_clock_in_mhz(self, cpu_clock_in_mhz):
        """Sets the cpu_clock_in_mhz of this SystemStats.

        Current frequency of CPU (core 0 ?) in MHz  (retrieved via `cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq` / 1000)  # noqa: E501

        :param cpu_clock_in_mhz: The cpu_clock_in_mhz of this SystemStats.
        :type cpu_clock_in_mhz: int
        """
        if cpu_clock_in_mhz is None:
            raise ValueError("Invalid value for `cpu_clock_in_mhz`, must not be `None`")  # noqa: E501

        self._cpu_clock_in_mhz = cpu_clock_in_mhz

    @property
    def cpu_temp_in_cels(self):
        """Gets the cpu_temp_in_cels of this SystemStats.

        Current temperature of CPU (core 0 ?) in Celsius  # noqa: E501

        :return: The cpu_temp_in_cels of this SystemStats.
        :rtype: int
        """
        return self._cpu_temp_in_cels

    @cpu_temp_in_cels.setter
    def cpu_temp_in_cels(self, cpu_temp_in_cels):
        """Sets the cpu_temp_in_cels of this SystemStats.

        Current temperature of CPU (core 0 ?) in Celsius  # noqa: E501

        :param cpu_temp_in_cels: The cpu_temp_in_cels of this SystemStats.
        :type cpu_temp_in_cels: int
        """
        if cpu_temp_in_cels is None:
            raise ValueError("Invalid value for `cpu_temp_in_cels`, must not be `None`")  # noqa: E501

        self._cpu_temp_in_cels = cpu_temp_in_cels

    @property
    def fan_dcin_perc(self):
        """Gets the fan_dcin_perc of this SystemStats.

        Current dutycycle of fan in percent  # noqa: E501

        :return: The fan_dcin_perc of this SystemStats.
        :rtype: int
        """
        return self._fan_dcin_perc

    @fan_dcin_perc.setter
    def fan_dcin_perc(self, fan_dcin_perc):
        """Sets the fan_dcin_perc of this SystemStats.

        Current dutycycle of fan in percent  # noqa: E501

        :param fan_dcin_perc: The fan_dcin_perc of this SystemStats.
        :type fan_dcin_perc: int
        """
        if fan_dcin_perc is None:
            raise ValueError("Invalid value for `fan_dcin_perc`, must not be `None`")  # noqa: E501

        self._fan_dcin_perc = fan_dcin_perc
