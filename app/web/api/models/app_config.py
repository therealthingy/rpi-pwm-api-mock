# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.web.api.models.base_model_ import Model
from app.web.api.models.app_fan_curve import AppFanCurve
from app.web.api import util

from app.web.api.models.app_fan_curve import AppFanCurve  # noqa: E501

class AppConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fan_on=None, logging_level=None, dc_update_interval_in_sec=None, logging_enabled=None, selected_fan_curve=None, pwm_gpio_pin=None, pwm_invert_signal=None, pwm_max_dcin_perc=None, pwm_min_dcin_perc=None):  # noqa: E501
        """AppConfig - a model defined in OpenAPI

        :param fan_on: The fan_on of this AppConfig.  # noqa: E501
        :type fan_on: bool
        :param logging_level: The logging_level of this AppConfig.  # noqa: E501
        :type logging_level: str
        :param dc_update_interval_in_sec: The dc_update_interval_in_sec of this AppConfig.  # noqa: E501
        :type dc_update_interval_in_sec: int
        :param logging_enabled: The logging_enabled of this AppConfig.  # noqa: E501
        :type logging_enabled: bool
        :param selected_fan_curve: The selected_fan_curve of this AppConfig.  # noqa: E501
        :type selected_fan_curve: AppFanCurve
        :param pwm_gpio_pin: The pwm_gpio_pin of this AppConfig.  # noqa: E501
        :type pwm_gpio_pin: int
        :param pwm_invert_signal: The pwm_invert_signal of this AppConfig.  # noqa: E501
        :type pwm_invert_signal: bool
        :param pwm_max_dcin_perc: The pwm_max_dcin_perc of this AppConfig.  # noqa: E501
        :type pwm_max_dcin_perc: int
        :param pwm_min_dcin_perc: The pwm_min_dcin_perc of this AppConfig.  # noqa: E501
        :type pwm_min_dcin_perc: int
        """
        self.openapi_types = {
            'fan_on': bool,
            'logging_level': str,
            'dc_update_interval_in_sec': int,
            'logging_enabled': bool,
            'selected_fan_curve': AppFanCurve,
            'pwm_gpio_pin': int,
            'pwm_invert_signal': bool,
            'pwm_max_dcin_perc': int,
            'pwm_min_dcin_perc': int
        }

        self.attribute_map = {
            'fan_on': 'fanOn',
            'logging_level': 'loggingLevel',
            'dc_update_interval_in_sec': 'DCUpdateIntervalInSec',
            'logging_enabled': 'loggingEnabled',
            'selected_fan_curve': 'selectedFanCurve',
            'pwm_gpio_pin': 'pwmGpioPin',
            'pwm_invert_signal': 'pwmInvertSignal',
            'pwm_max_dcin_perc': 'pwmMaxDCInPerc',
            'pwm_min_dcin_perc': 'pwmMinDCInPerc'
        }

        self._fan_on = fan_on
        self._logging_level = logging_level
        self._dc_update_interval_in_sec = dc_update_interval_in_sec
        self._logging_enabled = logging_enabled
        self._selected_fan_curve = selected_fan_curve
        self._pwm_gpio_pin = pwm_gpio_pin
        self._pwm_invert_signal = pwm_invert_signal
        self._pwm_max_dcin_perc = pwm_max_dcin_perc
        self._pwm_min_dcin_perc = pwm_min_dcin_perc

    @classmethod
    def from_dict(cls, dikt) -> 'AppConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppConfig of this AppConfig.  # noqa: E501
        :rtype: AppConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fan_on(self):
        """Gets the fan_on of this AppConfig.

        Whether fan is turned on (kill switch)  # noqa: E501

        :return: The fan_on of this AppConfig.
        :rtype: bool
        """
        return self._fan_on

    @fan_on.setter
    def fan_on(self, fan_on):
        """Sets the fan_on of this AppConfig.

        Whether fan is turned on (kill switch)  # noqa: E501

        :param fan_on: The fan_on of this AppConfig.
        :type fan_on: bool
        """
        if fan_on is None:
            raise ValueError("Invalid value for `fan_on`, must not be `None`")  # noqa: E501

        self._fan_on = fan_on

    @property
    def logging_level(self):
        """Gets the logging_level of this AppConfig.

        Current log level  # noqa: E501

        :return: The logging_level of this AppConfig.
        :rtype: str
        """
        return self._logging_level

    @logging_level.setter
    def logging_level(self, logging_level):
        """Sets the logging_level of this AppConfig.

        Current log level  # noqa: E501

        :param logging_level: The logging_level of this AppConfig.
        :type logging_level: str
        """
        allowed_values = ["DEBUG", "INFO", "WARN", "ERROR", "CRITICAL"]  # noqa: E501
        if logging_level not in allowed_values:
            raise ValueError(
                "Invalid value for `logging_level` ({0}), must be one of {1}"
                .format(logging_level, allowed_values)
            )

        self._logging_level = logging_level

    @property
    def dc_update_interval_in_sec(self):
        """Gets the dc_update_interval_in_sec of this AppConfig.

        How frequently the dutycycle shall be updated in seconds  # noqa: E501

        :return: The dc_update_interval_in_sec of this AppConfig.
        :rtype: int
        """
        return self._dc_update_interval_in_sec

    @dc_update_interval_in_sec.setter
    def dc_update_interval_in_sec(self, dc_update_interval_in_sec):
        """Sets the dc_update_interval_in_sec of this AppConfig.

        How frequently the dutycycle shall be updated in seconds  # noqa: E501

        :param dc_update_interval_in_sec: The dc_update_interval_in_sec of this AppConfig.
        :type dc_update_interval_in_sec: int
        """
        if dc_update_interval_in_sec is None:
            raise ValueError("Invalid value for `dc_update_interval_in_sec`, must not be `None`")  # noqa: E501
        if dc_update_interval_in_sec is not None and dc_update_interval_in_sec > 10:  # noqa: E501
            raise ValueError("Invalid value for `dc_update_interval_in_sec`, must be a value less than or equal to `10`")  # noqa: E501
        if dc_update_interval_in_sec is not None and dc_update_interval_in_sec < 1:  # noqa: E501
            raise ValueError("Invalid value for `dc_update_interval_in_sec`, must be a value greater than or equal to `1`")  # noqa: E501

        self._dc_update_interval_in_sec = dc_update_interval_in_sec

    @property
    def logging_enabled(self):
        """Gets the logging_enabled of this AppConfig.

        Whether logging is enabled  # noqa: E501

        :return: The logging_enabled of this AppConfig.
        :rtype: bool
        """
        return self._logging_enabled

    @logging_enabled.setter
    def logging_enabled(self, logging_enabled):
        """Sets the logging_enabled of this AppConfig.

        Whether logging is enabled  # noqa: E501

        :param logging_enabled: The logging_enabled of this AppConfig.
        :type logging_enabled: bool
        """
        if logging_enabled is None:
            raise ValueError("Invalid value for `logging_enabled`, must not be `None`")  # noqa: E501

        self._logging_enabled = logging_enabled

    @property
    def selected_fan_curve(self):
        """Gets the selected_fan_curve of this AppConfig.


        :return: The selected_fan_curve of this AppConfig.
        :rtype: AppFanCurve
        """
        return self._selected_fan_curve

    @selected_fan_curve.setter
    def selected_fan_curve(self, selected_fan_curve):
        """Sets the selected_fan_curve of this AppConfig.


        :param selected_fan_curve: The selected_fan_curve of this AppConfig.
        :type selected_fan_curve: AppFanCurve
        """
        if selected_fan_curve is None:
            raise ValueError("Invalid value for `selected_fan_curve`, must not be `None`")  # noqa: E501

        self._selected_fan_curve = selected_fan_curve

    @property
    def pwm_gpio_pin(self):
        """Gets the pwm_gpio_pin of this AppConfig.

        GPIO pin used for PWM (which applies the desired dutycycle for the fan)  # noqa: E501

        :return: The pwm_gpio_pin of this AppConfig.
        :rtype: int
        """
        return self._pwm_gpio_pin

    @pwm_gpio_pin.setter
    def pwm_gpio_pin(self, pwm_gpio_pin):
        """Sets the pwm_gpio_pin of this AppConfig.

        GPIO pin used for PWM (which applies the desired dutycycle for the fan)  # noqa: E501

        :param pwm_gpio_pin: The pwm_gpio_pin of this AppConfig.
        :type pwm_gpio_pin: int
        """
        if pwm_gpio_pin is None:
            raise ValueError("Invalid value for `pwm_gpio_pin`, must not be `None`")  # noqa: E501

        self._pwm_gpio_pin = pwm_gpio_pin

    @property
    def pwm_invert_signal(self):
        """Gets the pwm_invert_signal of this AppConfig.

        Whether PWM signal shall be inverted (may be required based on transitor type (PNP / NPN)  # noqa: E501

        :return: The pwm_invert_signal of this AppConfig.
        :rtype: bool
        """
        return self._pwm_invert_signal

    @pwm_invert_signal.setter
    def pwm_invert_signal(self, pwm_invert_signal):
        """Sets the pwm_invert_signal of this AppConfig.

        Whether PWM signal shall be inverted (may be required based on transitor type (PNP / NPN)  # noqa: E501

        :param pwm_invert_signal: The pwm_invert_signal of this AppConfig.
        :type pwm_invert_signal: bool
        """
        if pwm_invert_signal is None:
            raise ValueError("Invalid value for `pwm_invert_signal`, must not be `None`")  # noqa: E501

        self._pwm_invert_signal = pwm_invert_signal

    @property
    def pwm_max_dcin_perc(self):
        """Gets the pwm_max_dcin_perc of this AppConfig.

        Limits max duty cycle, i.e., the max fan speed in percent.  May be desirable for some fans which only operate reliably within a specific range of fan speeds. NOTE: This effectively overwrittes the applied fan curve.  # noqa: E501

        :return: The pwm_max_dcin_perc of this AppConfig.
        :rtype: int
        """
        return self._pwm_max_dcin_perc

    @pwm_max_dcin_perc.setter
    def pwm_max_dcin_perc(self, pwm_max_dcin_perc):
        """Sets the pwm_max_dcin_perc of this AppConfig.

        Limits max duty cycle, i.e., the max fan speed in percent.  May be desirable for some fans which only operate reliably within a specific range of fan speeds. NOTE: This effectively overwrittes the applied fan curve.  # noqa: E501

        :param pwm_max_dcin_perc: The pwm_max_dcin_perc of this AppConfig.
        :type pwm_max_dcin_perc: int
        """
        if pwm_max_dcin_perc is None:
            raise ValueError("Invalid value for `pwm_max_dcin_perc`, must not be `None`")  # noqa: E501
        if pwm_max_dcin_perc is not None and pwm_max_dcin_perc > 100:  # noqa: E501
            raise ValueError("Invalid value for `pwm_max_dcin_perc`, must be a value less than or equal to `100`")  # noqa: E501
        if pwm_max_dcin_perc is not None and pwm_max_dcin_perc < 1:  # noqa: E501
            raise ValueError("Invalid value for `pwm_max_dcin_perc`, must be a value greater than or equal to `1`")  # noqa: E501

        self._pwm_max_dcin_perc = pwm_max_dcin_perc

    @property
    def pwm_min_dcin_perc(self):
        """Gets the pwm_min_dcin_perc of this AppConfig.

        Limits min duty cycle, i.e., the min fan speed in percent.  May be desirable for some fans which only operate reliably within a specific range of fan speeds. NOTE: This effectively overwrittes the applied fan curve.  # noqa: E501

        :return: The pwm_min_dcin_perc of this AppConfig.
        :rtype: int
        """
        return self._pwm_min_dcin_perc

    @pwm_min_dcin_perc.setter
    def pwm_min_dcin_perc(self, pwm_min_dcin_perc):
        """Sets the pwm_min_dcin_perc of this AppConfig.

        Limits min duty cycle, i.e., the min fan speed in percent.  May be desirable for some fans which only operate reliably within a specific range of fan speeds. NOTE: This effectively overwrittes the applied fan curve.  # noqa: E501

        :param pwm_min_dcin_perc: The pwm_min_dcin_perc of this AppConfig.
        :type pwm_min_dcin_perc: int
        """
        if pwm_min_dcin_perc is None:
            raise ValueError("Invalid value for `pwm_min_dcin_perc`, must not be `None`")  # noqa: E501
        if pwm_min_dcin_perc is not None and pwm_min_dcin_perc > 100:  # noqa: E501
            raise ValueError("Invalid value for `pwm_min_dcin_perc`, must be a value less than or equal to `100`")  # noqa: E501
        if pwm_min_dcin_perc is not None and pwm_min_dcin_perc < 1:  # noqa: E501
            raise ValueError("Invalid value for `pwm_min_dcin_perc`, must be a value greater than or equal to `1`")  # noqa: E501

        self._pwm_min_dcin_perc = pwm_min_dcin_perc
