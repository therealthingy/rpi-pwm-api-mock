# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.web.api.models.base_model_ import Model
from app.web.api import util


class AppLogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date=None, level=None, message=None, uuid=None):  # noqa: E501
        """AppLogEntry - a model defined in OpenAPI

        :param date: The date of this AppLogEntry.  # noqa: E501
        :type date: datetime
        :param level: The level of this AppLogEntry.  # noqa: E501
        :type level: str
        :param message: The message of this AppLogEntry.  # noqa: E501
        :type message: str
        :param uuid: The uuid of this AppLogEntry.  # noqa: E501
        :type uuid: str
        """
        self.openapi_types = {
            'date': datetime,
            'level': str,
            'message': str,
            'uuid': str
        }

        self.attribute_map = {
            'date': 'date',
            'level': 'level',
            'message': 'message',
            'uuid': 'uuid'
        }

        self._date = date
        self._level = level
        self._message = message
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'AppLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppLogEntry of this AppLogEntry.  # noqa: E501
        :rtype: AppLogEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date(self):
        """Gets the date of this AppLogEntry.

        Date when log entry was logged  # noqa: E501

        :return: The date of this AppLogEntry.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this AppLogEntry.

        Date when log entry was logged  # noqa: E501

        :param date: The date of this AppLogEntry.
        :type date: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def level(self):
        """Gets the level of this AppLogEntry.

        Level of log entry  # noqa: E501

        :return: The level of this AppLogEntry.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AppLogEntry.

        Level of log entry  # noqa: E501

        :param level: The level of this AppLogEntry.
        :type level: str
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def message(self):
        """Gets the message of this AppLogEntry.

        The logged message  # noqa: E501

        :return: The message of this AppLogEntry.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AppLogEntry.

        The logged message  # noqa: E501

        :param message: The message of this AppLogEntry.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def uuid(self):
        """Gets the uuid of this AppLogEntry.

        UUID of log entry which is sent to client on error (can be used to find log entry more easily)  # noqa: E501

        :return: The uuid of this AppLogEntry.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AppLogEntry.

        UUID of log entry which is sent to client on error (can be used to find log entry more easily)  # noqa: E501

        :param uuid: The uuid of this AppLogEntry.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid
