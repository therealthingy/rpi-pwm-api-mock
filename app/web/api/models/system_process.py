# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.web.api.models.base_model_ import Model
from app.web.api import util


class SystemProcess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pid=None, name=None, cpu_util_in_perc=None, ppid=None):  # noqa: E501
        """SystemProcess - a model defined in OpenAPI

        :param pid: The pid of this SystemProcess.  # noqa: E501
        :type pid: int
        :param name: The name of this SystemProcess.  # noqa: E501
        :type name: str
        :param cpu_util_in_perc: The cpu_util_in_perc of this SystemProcess.  # noqa: E501
        :type cpu_util_in_perc: float
        :param ppid: The ppid of this SystemProcess.  # noqa: E501
        :type ppid: int
        """
        self.openapi_types = {
            'pid': int,
            'name': str,
            'cpu_util_in_perc': float,
            'ppid': int
        }

        self.attribute_map = {
            'pid': 'pid',
            'name': 'name',
            'cpu_util_in_perc': 'cpuUtilInPerc',
            'ppid': 'ppid'
        }

        self._pid = pid
        self._name = name
        self._cpu_util_in_perc = cpu_util_in_perc
        self._ppid = ppid

    @classmethod
    def from_dict(cls, dikt) -> 'SystemProcess':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SystemProcess of this SystemProcess.  # noqa: E501
        :rtype: SystemProcess
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pid(self):
        """Gets the pid of this SystemProcess.

        Pid of the process  # noqa: E501

        :return: The pid of this SystemProcess.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this SystemProcess.

        Pid of the process  # noqa: E501

        :param pid: The pid of this SystemProcess.
        :type pid: int
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")  # noqa: E501

        self._pid = pid

    @property
    def name(self):
        """Gets the name of this SystemProcess.

        Name of the process (or rather executable)  # noqa: E501

        :return: The name of this SystemProcess.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemProcess.

        Name of the process (or rather executable)  # noqa: E501

        :param name: The name of this SystemProcess.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cpu_util_in_perc(self):
        """Gets the cpu_util_in_perc of this SystemProcess.

        CPU utilization of the process in percent  # noqa: E501

        :return: The cpu_util_in_perc of this SystemProcess.
        :rtype: float
        """
        return self._cpu_util_in_perc

    @cpu_util_in_perc.setter
    def cpu_util_in_perc(self, cpu_util_in_perc):
        """Sets the cpu_util_in_perc of this SystemProcess.

        CPU utilization of the process in percent  # noqa: E501

        :param cpu_util_in_perc: The cpu_util_in_perc of this SystemProcess.
        :type cpu_util_in_perc: float
        """
        if cpu_util_in_perc is None:
            raise ValueError("Invalid value for `cpu_util_in_perc`, must not be `None`")  # noqa: E501
        if cpu_util_in_perc is not None and cpu_util_in_perc > 100:  # noqa: E501
            raise ValueError("Invalid value for `cpu_util_in_perc`, must be a value less than or equal to `100`")  # noqa: E501

        self._cpu_util_in_perc = cpu_util_in_perc

    @property
    def ppid(self):
        """Gets the ppid of this SystemProcess.

        Pid of the parent process  # noqa: E501

        :return: The ppid of this SystemProcess.
        :rtype: int
        """
        return self._ppid

    @ppid.setter
    def ppid(self, ppid):
        """Sets the ppid of this SystemProcess.

        Pid of the parent process  # noqa: E501

        :param ppid: The ppid of this SystemProcess.
        :type ppid: int
        """
        if ppid is None:
            raise ValueError("Invalid value for `ppid`, must not be `None`")  # noqa: E501

        self._ppid = ppid
